
** Conflict (shift/reduce) in state 152.
** Token involved: VERT
** This state is reached from toplevel after reading:

MATCH Expr WITH ArgMatchExpr RARROW MATCH Expr WITH ArgMatchExpr RARROW Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
MatchExpr 
MATCH Expr WITH CaseExpr 
                (?)

** In state 152, looking ahead at VERT, shifting is permitted
** because of the following sub-derivation:

ArgMatchExpr RARROW Expr VERT CaseExpr 
                    MatchExpr 
                    MATCH Expr WITH CaseExpr 
                                    ArgMatchExpr RARROW Expr . VERT CaseExpr 

** In state 152, looking ahead at VERT, reducing production
** CaseExpr -> ArgMatchExpr RARROW Expr 
** is permitted because of the following sub-derivation:

ArgMatchExpr RARROW Expr VERT CaseExpr // lookahead token appears
                    MatchExpr // lookahead token is inherited
                    MATCH Expr WITH CaseExpr // lookahead token is inherited
                                    ArgMatchExpr RARROW Expr . 

** Conflict (reduce/reduce) in state 145.
** Token involved: RSQPAREN
** This state is reached from toplevel after reading:

LSQPAREN Expr SEMI 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
ConsExpr 
ORExpr CONS ConsExpr 
ANDExpr 
EQExpr 
PExpr EQ PExpr 
MExpr 
AppExpr 
AExpr 
LSQPAREN ListExpr RSQPAREN // lookahead token appears
         (?)

** In state 145, looking ahead at RSQPAREN, reducing production
** ListExpr -> Expr SEMI 
** is permitted because of the following sub-derivation:

Expr SEMI . 

** In state 145, looking ahead at RSQPAREN, reducing production
** ListExpr -> 
** is permitted because of the following sub-derivation:

Expr SEMI ListExpr // lookahead token is inherited
          . 

** Conflict (shift/reduce) in state 137.
** Token involved: RPAREN
** This state is reached from toplevel after reading:

LPAREN Expr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
ConsExpr 
ORExpr CONS ConsExpr 
ANDExpr 
EQExpr 
PExpr EQ PExpr 
MExpr 
AppExpr 
AExpr 
(?)

** In state 137, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

LPAREN Expr . RPAREN 

** In state 137, looking ahead at RPAREN, reducing production
** TupleExpr -> Expr 
** is permitted because of the following sub-derivation:

LPAREN TupleExpr RPAREN // lookahead token appears
       Expr . 

** Conflict (reduce/reduce) in state 111.
** Tokens involved: SEMI RSQPAREN RPAREN RARROW EQ CONS COMMA
** The following explanations concentrate on token EQ.
** This state is reached from toplevel after reading:

LET ArgMatchExpr CONS ArgMatchExpr CONS ConsMatchExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
MulLET SEMISEMI 
LET DeclExpr MulLET 
    UnitDeclExpr AND DeclExpr 
    ArgMatchExpr EQ Expr // lookahead token appears
    ArgMatchExpr CONS ConsMatchExpr // lookahead token is inherited
                      (?)

** In state 111, looking ahead at EQ, reducing production
** ArgMatchExpr -> ArgMatchExpr CONS ConsMatchExpr 
** is permitted because of the following sub-derivation:

ArgMatchExpr // lookahead token is inherited
ArgMatchExpr CONS ConsMatchExpr . 

** In state 111, looking ahead at EQ, reducing production
** ConsMatchExpr -> ArgMatchExpr CONS ConsMatchExpr 
** is permitted because of the following sub-derivation:

ArgMatchExpr CONS ConsMatchExpr . 

** Conflict (shift/reduce) in state 109.
** Token involved: CONS
** This state is reached from toplevel after reading:

LET ArgMatchExpr CONS ArgMatchExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
MulLET SEMISEMI 
LET DeclExpr MulLET 
    UnitDeclExpr AND DeclExpr 
    ArgMatchExpr EQ Expr 
    (?)

** In state 109, looking ahead at CONS, shifting is permitted
** because of the following sub-derivation:

ArgMatchExpr CONS ConsMatchExpr 
                  ArgMatchExpr CONS ConsMatchExpr 
                  ArgMatchExpr . CONS ConsMatchExpr 

** In state 109, looking ahead at CONS, reducing production
** ConsMatchExpr -> ArgMatchExpr 
** is permitted because of the following sub-derivation:

ArgMatchExpr CONS ConsMatchExpr // lookahead token appears
ArgMatchExpr CONS ConsMatchExpr // lookahead token is inherited
                  ArgMatchExpr . 

** Conflict (shift/reduce) in state 106.
** Token involved: CONS
** This state is reached from toplevel after reading:

LET CONSTR ArgMatchExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
MulLET SEMISEMI 
LET DeclExpr MulLET 
    UnitDeclExpr AND DeclExpr 
    ArgMatchExpr EQ Expr 
    (?)

** In state 106, looking ahead at CONS, shifting is permitted
** because of the following sub-derivation:

CONSTR ArgMatchExpr 
       ArgMatchExpr . CONS ConsMatchExpr 

** In state 106, looking ahead at CONS, reducing production
** ArgMatchExpr -> CONSTR ArgMatchExpr 
** is permitted because of the following sub-derivation:

ArgMatchExpr CONS ConsMatchExpr // lookahead token appears
CONSTR ArgMatchExpr . 

** Conflict (shift/reduce) in state 78.
** Token involved: AAND
** This state is reached from toplevel after reading:

CONSTR ANDExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
ConsExpr 
ORExpr CONS ConsExpr 
ANDExpr 
(?)

** In state 78, looking ahead at AAND, shifting is permitted
** because of the following sub-derivation:

EQExpr 
PExpr EQ PExpr 
MExpr 
AppExpr 
AExpr 
CONSTR Expr 
       ConsExpr 
       ORExpr CONS ConsExpr 
       ANDExpr 
       ANDExpr . AAND LTExpr 

** In state 78, looking ahead at AAND, reducing production
** ORExpr -> ANDExpr 
** is permitted because of the following sub-derivation:

ANDExpr AAND LTExpr // lookahead token appears
EQExpr // lookahead token is inherited
LTExpr // lookahead token is inherited
GTExpr // lookahead token is inherited
PExpr // lookahead token is inherited
MExpr // lookahead token is inherited
AppExpr // lookahead token is inherited
AExpr // lookahead token is inherited
CONSTR Expr // lookahead token is inherited
       ConsExpr // lookahead token is inherited
       ORExpr // lookahead token is inherited
       ANDExpr . 

** Conflict (shift/reduce) in state 74.
** Tokens involved: PLUS MINUS LT GT
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

CONSTR ANDExpr AAND PExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
ConsExpr 
ORExpr CONS ConsExpr 
ANDExpr 
EQExpr 
PExpr EQ PExpr 
(?)

** In state 74, looking ahead at PLUS, reducing production
** GTExpr -> PExpr 
** is permitted because of the following sub-derivation:

PExpr PLUS MExpr // lookahead token appears
MExpr // lookahead token is inherited
AppExpr // lookahead token is inherited
AExpr // lookahead token is inherited
CONSTR Expr // lookahead token is inherited
       ConsExpr // lookahead token is inherited
       ORExpr // lookahead token is inherited
       ANDExpr // lookahead token is inherited
       ANDExpr AAND LTExpr // lookahead token is inherited
                    GTExpr // lookahead token is inherited
                    PExpr . 

** In state 74, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

MExpr 
AppExpr 
AExpr 
CONSTR Expr 
       ConsExpr 
       ORExpr CONS ConsExpr 
       ANDExpr 
       ANDExpr AAND LTExpr 
                    PExpr LT PExpr 
                    PExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 72.
** Token involved: AAND
** This state is reached from toplevel after reading:

CONSTR ORExpr OOR ANDExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
ConsExpr 
ORExpr CONS ConsExpr 
ANDExpr 
(?)

** In state 72, looking ahead at AAND, shifting is permitted
** because of the following sub-derivation:

EQExpr 
PExpr EQ PExpr 
MExpr 
AppExpr 
AExpr 
CONSTR Expr 
       ConsExpr 
       ORExpr CONS ConsExpr 
       ORExpr OOR ANDExpr 
                  ANDExpr . AAND LTExpr 

** In state 72, looking ahead at AAND, reducing production
** ORExpr -> ORExpr OOR ANDExpr 
** is permitted because of the following sub-derivation:

ANDExpr AAND LTExpr // lookahead token appears
EQExpr // lookahead token is inherited
LTExpr // lookahead token is inherited
GTExpr // lookahead token is inherited
PExpr // lookahead token is inherited
MExpr // lookahead token is inherited
AppExpr // lookahead token is inherited
AExpr // lookahead token is inherited
CONSTR Expr // lookahead token is inherited
       ConsExpr // lookahead token is inherited
       ORExpr // lookahead token is inherited
       ORExpr OOR ANDExpr . 

** Conflict (shift/reduce) in state 67.
** Tokens involved: OOR CONS
** The following explanations concentrate on token OOR.
** This state is reached from toplevel after reading:

CONSTR ORExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
ConsExpr 
ORExpr CONS ConsExpr 
(?)

** In state 67, looking ahead at OOR, reducing production
** ConsExpr -> ORExpr 
** is permitted because of the following sub-derivation:

ORExpr OOR ANDExpr // lookahead token appears
ANDExpr // lookahead token is inherited
EQExpr // lookahead token is inherited
LTExpr // lookahead token is inherited
GTExpr // lookahead token is inherited
PExpr // lookahead token is inherited
MExpr // lookahead token is inherited
AppExpr // lookahead token is inherited
AExpr // lookahead token is inherited
CONSTR Expr // lookahead token is inherited
       ConsExpr // lookahead token is inherited
       ORExpr . 

** In state 67, looking ahead at OOR, shifting is permitted
** because of the following sub-derivation:

ANDExpr 
EQExpr 
PExpr EQ PExpr 
MExpr 
AppExpr 
AExpr 
CONSTR Expr 
       ConsExpr 
       ORExpr CONS ConsExpr 
       ORExpr . OOR ANDExpr 

** Conflict (shift/reduce) in state 66.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

CONSTR PExpr EQ PExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
ConsExpr 
ORExpr CONS ConsExpr 
ANDExpr 
EQExpr 
PExpr EQ PExpr 
(?)

** In state 66, looking ahead at PLUS, reducing production
** EQExpr -> PExpr EQ PExpr 
** is permitted because of the following sub-derivation:

PExpr PLUS MExpr // lookahead token appears
MExpr // lookahead token is inherited
AppExpr // lookahead token is inherited
AExpr // lookahead token is inherited
CONSTR Expr // lookahead token is inherited
       ConsExpr // lookahead token is inherited
       ORExpr // lookahead token is inherited
       ANDExpr // lookahead token is inherited
       EQExpr // lookahead token is inherited
       PExpr EQ PExpr . 

** In state 66, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

MExpr 
AppExpr 
AExpr 
CONSTR Expr 
       ConsExpr 
       ORExpr CONS ConsExpr 
       ANDExpr 
       EQExpr 
       PExpr EQ PExpr 
                PExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 64.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

CONSTR PExpr GT PExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
ConsExpr 
ORExpr CONS ConsExpr 
ANDExpr 
EQExpr 
PExpr EQ PExpr 
(?)

** In state 64, looking ahead at PLUS, reducing production
** GTExpr -> PExpr GT PExpr 
** is permitted because of the following sub-derivation:

PExpr PLUS MExpr // lookahead token appears
MExpr // lookahead token is inherited
AppExpr // lookahead token is inherited
AExpr // lookahead token is inherited
CONSTR Expr // lookahead token is inherited
       ConsExpr // lookahead token is inherited
       ORExpr // lookahead token is inherited
       ANDExpr // lookahead token is inherited
       EQExpr // lookahead token is inherited
       LTExpr // lookahead token is inherited
       GTExpr // lookahead token is inherited
       PExpr GT PExpr . 

** In state 64, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

MExpr 
AppExpr 
AExpr 
CONSTR Expr 
       ConsExpr 
       ORExpr CONS ConsExpr 
       ANDExpr 
       EQExpr 
       LTExpr 
       GTExpr 
       PExpr GT PExpr 
                PExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 62.
** Token involved: MULT
** This state is reached from toplevel after reading:

CONSTR MExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
ConsExpr 
ORExpr CONS ConsExpr 
ANDExpr 
EQExpr 
PExpr EQ PExpr 
MExpr 
(?)

** In state 62, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

AppExpr 
AExpr 
CONSTR Expr 
       ConsExpr 
       ORExpr CONS ConsExpr 
       ANDExpr 
       EQExpr 
       PExpr EQ PExpr 
       MExpr 
       MExpr . MULT AppExpr 

** In state 62, looking ahead at MULT, reducing production
** PExpr -> MExpr 
** is permitted because of the following sub-derivation:

MExpr MULT AppExpr // lookahead token appears
AppExpr // lookahead token is inherited
AExpr // lookahead token is inherited
CONSTR Expr // lookahead token is inherited
       ConsExpr // lookahead token is inherited
       ORExpr // lookahead token is inherited
       ANDExpr // lookahead token is inherited
       EQExpr // lookahead token is inherited
       LTExpr // lookahead token is inherited
       GTExpr // lookahead token is inherited
       PExpr // lookahead token is inherited
       MExpr . 

** Conflict (shift/reduce) in state 61.
** Tokens involved: PLUS MINUS
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

CONSTR PExpr LT PExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
ConsExpr 
ORExpr CONS ConsExpr 
ANDExpr 
EQExpr 
PExpr EQ PExpr 
(?)

** In state 61, looking ahead at PLUS, reducing production
** LTExpr -> PExpr LT PExpr 
** is permitted because of the following sub-derivation:

PExpr PLUS MExpr // lookahead token appears
MExpr // lookahead token is inherited
AppExpr // lookahead token is inherited
AExpr // lookahead token is inherited
CONSTR Expr // lookahead token is inherited
       ConsExpr // lookahead token is inherited
       ORExpr // lookahead token is inherited
       ANDExpr // lookahead token is inherited
       EQExpr // lookahead token is inherited
       LTExpr // lookahead token is inherited
       PExpr LT PExpr . 

** In state 61, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

MExpr 
AppExpr 
AExpr 
CONSTR Expr 
       ConsExpr 
       ORExpr CONS ConsExpr 
       ANDExpr 
       EQExpr 
       LTExpr 
       PExpr LT PExpr 
                PExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 59.
** Token involved: MULT
** This state is reached from toplevel after reading:

CONSTR PExpr MINUS MExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
ConsExpr 
ORExpr CONS ConsExpr 
ANDExpr 
EQExpr 
PExpr EQ PExpr 
MExpr 
(?)

** In state 59, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

AppExpr 
AExpr 
CONSTR Expr 
       ConsExpr 
       ORExpr CONS ConsExpr 
       ANDExpr 
       EQExpr 
       PExpr EQ PExpr 
       PExpr MINUS MExpr 
                   MExpr . MULT AppExpr 

** In state 59, looking ahead at MULT, reducing production
** PExpr -> PExpr MINUS MExpr 
** is permitted because of the following sub-derivation:

MExpr MULT AppExpr // lookahead token appears
AppExpr // lookahead token is inherited
AExpr // lookahead token is inherited
CONSTR Expr // lookahead token is inherited
       ConsExpr // lookahead token is inherited
       ORExpr // lookahead token is inherited
       ANDExpr // lookahead token is inherited
       EQExpr // lookahead token is inherited
       LTExpr // lookahead token is inherited
       GTExpr // lookahead token is inherited
       PExpr // lookahead token is inherited
       PExpr MINUS MExpr . 

** Conflict (shift/reduce) in state 57.
** Tokens involved: TRUE LSQPAREN LPAREN INTV ID FALSE CONSTR
** The following explanations concentrate on token TRUE.
** This state is reached from toplevel after reading:

CONSTR AppExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
ConsExpr 
ORExpr CONS ConsExpr 
ANDExpr 
EQExpr 
PExpr EQ PExpr 
MExpr 
AppExpr 
(?)

** In state 57, looking ahead at TRUE, shifting is permitted
** because of the following sub-derivation:

AExpr 
CONSTR Expr 
       ConsExpr 
       ORExpr CONS ConsExpr 
       ANDExpr 
       EQExpr 
       PExpr EQ PExpr 
       MExpr 
       AppExpr 
       AppExpr AExpr 
               . TRUE 

** In state 57, looking ahead at TRUE, reducing production
** MExpr -> AppExpr 
** is permitted because of the following sub-derivation:

AppExpr AExpr // lookahead token appears because AExpr can begin with TRUE
AExpr // lookahead token is inherited
CONSTR Expr // lookahead token is inherited
       ConsExpr // lookahead token is inherited
       ORExpr // lookahead token is inherited
       ANDExpr // lookahead token is inherited
       EQExpr // lookahead token is inherited
       LTExpr // lookahead token is inherited
       GTExpr // lookahead token is inherited
       PExpr // lookahead token is inherited
       MExpr // lookahead token is inherited
       AppExpr . 

** Conflict (shift/reduce) in state 54.
** Tokens involved: TRUE LSQPAREN LPAREN INTV ID FALSE CONSTR
** The following explanations concentrate on token TRUE.
** This state is reached from toplevel after reading:

CONSTR MExpr MULT AppExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
ConsExpr 
ORExpr CONS ConsExpr 
ANDExpr 
EQExpr 
PExpr EQ PExpr 
MExpr 
AppExpr 
(?)

** In state 54, looking ahead at TRUE, shifting is permitted
** because of the following sub-derivation:

AExpr 
CONSTR Expr 
       ConsExpr 
       ORExpr CONS ConsExpr 
       ANDExpr 
       EQExpr 
       PExpr EQ PExpr 
       MExpr 
       MExpr MULT AppExpr 
                  AppExpr AExpr 
                          . TRUE 

** In state 54, looking ahead at TRUE, reducing production
** MExpr -> MExpr MULT AppExpr 
** is permitted because of the following sub-derivation:

AppExpr AExpr // lookahead token appears because AExpr can begin with TRUE
AExpr // lookahead token is inherited
CONSTR Expr // lookahead token is inherited
       ConsExpr // lookahead token is inherited
       ORExpr // lookahead token is inherited
       ANDExpr // lookahead token is inherited
       EQExpr // lookahead token is inherited
       LTExpr // lookahead token is inherited
       GTExpr // lookahead token is inherited
       PExpr // lookahead token is inherited
       MExpr // lookahead token is inherited
       MExpr MULT AppExpr . 

** Conflict (shift/reduce) in state 52.
** Token involved: MULT
** This state is reached from toplevel after reading:

CONSTR PExpr PLUS MExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
ConsExpr 
ORExpr CONS ConsExpr 
ANDExpr 
EQExpr 
PExpr EQ PExpr 
MExpr 
(?)

** In state 52, looking ahead at MULT, shifting is permitted
** because of the following sub-derivation:

AppExpr 
AExpr 
CONSTR Expr 
       ConsExpr 
       ORExpr CONS ConsExpr 
       ANDExpr 
       EQExpr 
       PExpr EQ PExpr 
       PExpr PLUS MExpr 
                  MExpr . MULT AppExpr 

** In state 52, looking ahead at MULT, reducing production
** PExpr -> PExpr PLUS MExpr 
** is permitted because of the following sub-derivation:

MExpr MULT AppExpr // lookahead token appears
AppExpr // lookahead token is inherited
AExpr // lookahead token is inherited
CONSTR Expr // lookahead token is inherited
       ConsExpr // lookahead token is inherited
       ORExpr // lookahead token is inherited
       ANDExpr // lookahead token is inherited
       EQExpr // lookahead token is inherited
       LTExpr // lookahead token is inherited
       GTExpr // lookahead token is inherited
       PExpr // lookahead token is inherited
       PExpr PLUS MExpr . 

** Conflict (shift/reduce) in state 50.
** Tokens involved: PLUS MINUS LT GT EQ
** The following explanations concentrate on token PLUS.
** This state is reached from toplevel after reading:

CONSTR PExpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
ConsExpr 
ORExpr CONS ConsExpr 
ANDExpr 
EQExpr 
PExpr EQ PExpr 
(?)

** In state 50, looking ahead at PLUS, reducing production
** GTExpr -> PExpr 
** is permitted because of the following sub-derivation:

PExpr PLUS MExpr // lookahead token appears
MExpr // lookahead token is inherited
AppExpr // lookahead token is inherited
AExpr // lookahead token is inherited
CONSTR Expr // lookahead token is inherited
       ConsExpr // lookahead token is inherited
       ORExpr // lookahead token is inherited
       ANDExpr // lookahead token is inherited
       EQExpr // lookahead token is inherited
       LTExpr // lookahead token is inherited
       GTExpr // lookahead token is inherited
       PExpr . 

** In state 50, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

MExpr 
AppExpr 
AExpr 
CONSTR Expr 
       ConsExpr 
       ORExpr CONS ConsExpr 
       ANDExpr 
       EQExpr 
       PExpr EQ PExpr 
       PExpr . PLUS MExpr 

** Conflict (shift/reduce) in state 49.
** Tokens involved: TRUE LSQPAREN LPAREN LET INTV ID FALSE CONSTR
** The following explanations concentrate on token TRUE.
** This state is reached from toplevel after reading:

CONSTR 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
Expr SEMISEMI 
ConsExpr 
ORExpr CONS ConsExpr 
ANDExpr 
EQExpr 
PExpr EQ PExpr 
MExpr 
AppExpr 
(?)

** In state 49, looking ahead at TRUE, shifting is permitted
** because of the following sub-derivation:

AExpr 
CONSTR Expr 
       ConsExpr 
       ORExpr CONS ConsExpr 
       ANDExpr 
       EQExpr 
       PExpr EQ PExpr 
       MExpr 
       AppExpr 
       AExpr 
       . TRUE 

** In state 49, looking ahead at TRUE, reducing production
** AExpr -> CONSTR 
** is permitted because of the following sub-derivation:

AppExpr AExpr // lookahead token appears because AExpr can begin with TRUE
AExpr // lookahead token is inherited
CONSTR . 
